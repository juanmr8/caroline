{"version":3,"sources":["scripts.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","testLocal","console","log","camelCase","testVar","preserveCamelCase","string","locale","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","test","slice","toLocaleLowerCase","toLocaleUpperCase","preserveConsecutiveUppercase","input","replace","m1","toLowerCase","postProcess","options","_","p1","m","Array","isArray","TypeError","pascalCase","map","x","trim","filter","join","hasUpperCase","charAt","default"],"mappings":"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","file":"scripts.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\nconst testLocal = \"Here's a local script file!\";\nconsole.log(testLocal);\n\nconst camelCase = require('camelcase');\nconst testVar = \"testing camelcase in js\";\nconsole.log(camelCase(testVar));\n\nconsole.log(\"Here's another JS File\");\n},{\"camelcase\":2}],2:[function(require,module,exports){\n'use strict';\n\nconst preserveCamelCase = (string, locale) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[\\p{Lu}]/u.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[\\p{Ll}]/u.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLocaleLowerCase(locale) === character && character.toLocaleUpperCase(locale) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toLocaleUpperCase(locale) === character && character.toLocaleLowerCase(locale) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = input => {\n\treturn input.replace(/^[\\p{Lu}](?![\\p{Lu}])/gu, m1 => m1.toLowerCase());\n};\n\nconst postProcess = (input, options) => {\n\treturn input.replace(/[_.\\- ]+([\\p{Alpha}\\p{N}_]|$)/gu, (_, p1) => p1.toLocaleUpperCase(options.locale))\n\t\t.replace(/\\d+([\\p{Alpha}\\p{N}_]|$)/gu, m => m.toLocaleUpperCase(options.locale));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toLocaleUpperCase(options.locale) : input.toLocaleLowerCase(options.locale);\n\t}\n\n\tconst hasUpperCase = input !== input.toLocaleLowerCase(options.locale);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, options.locale);\n\t}\n\n\tinput = input.replace(/^[_.\\- ]+/, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input);\n\t} else {\n\t\tinput = input.toLocaleLowerCase();\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = input.charAt(0).toLocaleUpperCase(options.locale) + input.slice(1);\n\t}\n\n\treturn postProcess(input, options);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n\n},{}]},{},[1]);\n"]}